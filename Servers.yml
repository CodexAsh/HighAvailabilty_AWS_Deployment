Description: > 

    "This Script includes Hosting of Websevers for the Applciation, Database and Loadblancer
    Load balalncing and ofcourse firewalls rules"

Parameters:
    EnvironmentName:
        Description: An Environment name that will be prefixed to resources
        Type: String


Resources:
      LBSecurityGroup:
              Type: AWS::EC2::SecurityGroup
              Properties: 
                  GroupDescription: "This is a Security Group for Load balancer"
                  SecurityGroupEgress: 
                      - IpProtocol: tcp
                        FromPort: 80
                        ToPort: 80
                        CidrIp: 0.0.0.0/0
                  SecurityGroupIngress: 
                      - IpProtocol: tcp
                        FromPort: 80
                        ToPort: 80
                        CidrIp: 0.0.0.0/0
                  Tags: 
                    - Key: Name
                      Value: !Ref EnvironmentName
                  VpcId: 
                    Fn::ImportValue: 
                          !Sub "${EnvironmentName}-VPC"

      WSSecurityGroup:
            Type: AWS::EC2::SecurityGroup
            Properties: 
                GroupDescription: "This is a Security Group for WebServers"
                SecurityGroupEgress: 
                    - IpProtocol: tcp
                      FromPort: 80
                      ToPort: 80
                      CidrIp: 0.0.0.0/0
                
                SecurityGroupIngress: 
                    - IpProtocol: tcp
                      FromPort: 80
                      ToPort: 80
                      CidrIp: 0.0.0.0/0
                
                Tags: 
                  - Key: Name
                    Value: !Ref EnvironmentName
                VpcId: 
                  Fn::ImportValue: 
                      !Sub "${EnvironmentName}-VPC"

      WebserversLaunchConfig:
              Type: AWS::AutoScaling::LaunchConfiguration
              Properties: 
                  AssociatePublicIpAddress: true
                  ImageId: ami-0f69bc5520884278e
                  InstanceType: t3.micro
                  SecurityGroups: 
                    - Ref: WSSecurityGroup
                  UserData:
                    Fn::Base64:  |
                        #!/bin/bash
                        apt update -y
                        apt install nginx -y
                        systemctl start nginx



      WebGroup:                
          Type: AWS::AutoScaling::AutoScalingGroup
          Properties: 
            LaunchConfigurationName: !Ref WebserversLaunchConfig
            MaxSize: 3
            MinSize: 1
            TargetGroupARNs: 
             - Ref: WebAppTargetGroup
            Tags:
            - Key: Environment
              Value: Production
              PropagateAtLaunch: true
            - Key: Purpose
              Value: WebServerGroup
              PropagateAtLaunch: false
            VPCZoneIdentifier: 
               - Fn::ImportValue:
                  !Sub "${EnvironmentName}-Private-Subnets"



      WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 35
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 15
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPC"

      LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties: 
          Name: ApplicationLoadBalancer
          SecurityGroups: 
            - !Ref LBSecurityGroup
          Subnets: 
             - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet1"
             - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet2"
       

      LoadBalancerListner:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties: 
          DefaultActions: 
          - Type: forward
            TargetGroupArn: !Ref WebAppTargetGroup
          LoadBalancerArn: !Ref LoadBalancer
          Port: 80
          Protocol: HTTP

      ListnerRule:
          Type: AWS::ElasticLoadBalancingV2::ListenerRule
          Properties: 
            Actions: 
              - Type: forward
                TargetGroupArn: !Ref WebAppTargetGroup
            Conditions: 
              - Field: path-pattern
                Values: [/]
            ListenerArn: !Ref LoadBalancerListner
            Priority: 1

          
